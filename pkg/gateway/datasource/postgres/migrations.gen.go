// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/000001_init_schema.down.sql (30B)
// migrations/000001_init_schema.up.sql (329B)
// migrations/000002_init_schema.down.sql (31B)
// migrations/000002_init_schema.up.sql (681B)

package postgres

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\x06\x04\x00\x00\xff\xff\x12\x35\x0c\x5f\x1e\x00\x00\x00")

func _000001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaDownSql,
		"000001_init_schema.down.sql",
	)
}

func _000001_init_schemaDownSql() (*asset, error) {
	bytes, err := _000001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.down.sql", size: 30, mode: os.FileMode(0777), modTime: time.Unix(1612204464, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0xc9, 0x6e, 0x89, 0x2e, 0x67, 0x3c, 0x4d, 0x0, 0xf4, 0xdd, 0xe1, 0x8f, 0xef, 0xcc, 0x37, 0x7a, 0xcb, 0x35, 0x84, 0xdc, 0x2c, 0xc0, 0x1f, 0x59, 0x62, 0x53, 0x11, 0x40, 0x68, 0x68, 0x7a}}
	return a, nil
}

var __000001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xc1\x4a\x03\x31\x10\xc6\xf1\x7b\x9e\xe2\x23\xa7\x04\x3c\xd8\x73\x4f\xab\x8d\xb0\x18\x53\x5d\x12\xb0\x27\x99\x66\xa3\x06\xdc\xb4\x64\x67\x15\x7c\x7a\xa9\xed\x8a\x42\xc1\x9c\x72\xf8\xcd\x30\xfc\xaf\x3b\xd3\x78\x03\xdf\x5c\x59\x03\x49\x31\xee\xa6\xc2\xa3\x14\x4a\x00\x80\xcc\xbd\xc4\xfc\xa6\x29\xf7\xb8\xef\xda\xbb\xa6\xdb\xe0\xd6\x6c\x2e\x8e\x24\xee\x9f\x7f\x4c\x7c\xa5\xaa\x16\x0b\x7d\xf8\xbb\xb5\x87\x0b\xd6\x9e\x58\xa1\x21\xcd\xee\x9d\xea\x41\xe2\x0c\x1b\x53\xac\x89\xe5\x7f\x6c\x4b\x6f\x54\xe2\x71\xe1\x36\xbf\xe4\xc2\xf8\xc3\xb0\x32\x37\x4d\xb0\x1e\xea\x52\xcf\x77\xd6\x44\x9c\xfa\x27\x62\x09\xce\x43\x1a\x99\x86\x3d\x7f\x9e\x19\x29\xbb\x0f\xa5\xb5\xd0\x4b\x21\x4e\x79\x82\x6b\x1f\x82\x41\xeb\x56\xe6\x11\x6b\xf7\x2b\x14\xd4\x77\x00\xbd\xfc\x0a\x00\x00\xff\xff\x72\xcf\xcf\xf6\x49\x01\x00\x00")

func _000001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaUpSql,
		"000001_init_schema.up.sql",
	)
}

func _000001_init_schemaUpSql() (*asset, error) {
	bytes, err := _000001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.up.sql", size: 329, mode: os.FileMode(0777), modTime: time.Unix(1612443868, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x74, 0xe1, 0x3e, 0x12, 0x93, 0xd3, 0x97, 0x38, 0x94, 0x7a, 0x8a, 0x32, 0xd7, 0x49, 0xa5, 0xd0, 0x27, 0x8, 0xa7, 0xea, 0x85, 0x90, 0xf8, 0x50, 0x66, 0x37, 0x6, 0x11, 0x6b, 0x45, 0x70}}
	return a, nil
}

var __000002_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x29\x4a\xcc\x2b\x4e\x4b\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\x9f\x5c\x6f\x39\x1f\x00\x00\x00")

func _000002_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_schemaDownSql,
		"000002_init_schema.down.sql",
	)
}

func _000002_init_schemaDownSql() (*asset, error) {
	bytes, err := _000002_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_schema.down.sql", size: 31, mode: os.FileMode(0777), modTime: time.Unix(1612370920, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0xaa, 0x2, 0x1a, 0x70, 0x62, 0xf1, 0xed, 0xe5, 0x5f, 0x99, 0x50, 0x36, 0x7d, 0x42, 0xfc, 0x94, 0x66, 0xf, 0x2f, 0x75, 0x69, 0x41, 0xc, 0x3f, 0x34, 0xd5, 0x2d, 0x43, 0xe1, 0x57, 0x36}}
	return a, nil
}

var __000002_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcd\x6a\xf4\x20\x14\x86\xf7\x5e\xc5\xc1\x95\xc2\xdc\xc1\xac\xfc\x26\x27\x1f\xa1\xd6\x14\xeb\x40\x67\x15\x6c\x62\x8b\x8b\x98\x12\x0d\x85\x5e\x7d\xb1\x33\x84\x92\xda\x1f\xe6\xac\xcf\xe3\xfb\xfa\xe8\x41\xa3\x30\x08\x46\xfc\x93\x08\x34\xcd\x36\xc4\x27\x37\x47\x4a\x18\x01\x00\xa0\x7e\xa0\x50\x9a\x65\xf1\x03\xdc\xe9\xe6\x56\xe8\x13\xdc\xe0\x69\x77\x5e\xb7\x7d\x3f\x2d\x21\x75\xd3\xec\x9f\x7d\xe8\x56\xfa\x63\xfd\x32\xaa\x35\xa0\x8e\x52\x6e\x90\xc1\xc5\xe4\x83\x4d\x7e\x3a\x73\x3f\x21\x63\x26\xbe\x16\x7b\xcc\xa1\xa9\x88\xf4\xb3\xb3\xc9\x0d\x9d\xdd\x60\xc9\x8f\x2e\x26\x3b\xbe\xa4\xb7\x15\x81\x0a\x6b\x71\x94\x06\x58\x98\x5e\x19\xe7\x84\xef\x09\x11\xd2\xa0\x2e\x78\xca\x87\x88\xaa\x82\xba\xd5\xd8\xfc\x57\xd9\x05\xb0\x82\x07\x0e\x1a\x6b\xd4\xa8\x0e\x78\xbf\x5e\x3a\x52\x60\x59\xf1\xf5\x01\x1b\x6b\xbf\xa6\x5c\xde\xbb\x51\x15\x3e\x40\xab\x3e\x27\x95\x6b\xff\x99\xd9\x36\xb9\x22\x6c\xf7\xed\x6f\xe0\xfb\xf7\x00\x00\x00\xff\xff\xb4\xbb\xc2\xb8\xa9\x02\x00\x00")

func _000002_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_schemaUpSql,
		"000002_init_schema.up.sql",
	)
}

func _000002_init_schemaUpSql() (*asset, error) {
	bytes, err := _000002_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_schema.up.sql", size: 681, mode: os.FileMode(0777), modTime: time.Unix(1612370920, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x48, 0x10, 0xed, 0xb5, 0x11, 0x0, 0x82, 0xb6, 0xd9, 0x64, 0x18, 0xea, 0x3b, 0x0, 0x6, 0xc7, 0xee, 0x7e, 0x33, 0xb9, 0x93, 0x52, 0xb, 0x32, 0xa, 0x2c, 0xfd, 0x9f, 0xf5, 0xad, 0x14}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_schema.down.sql": _000001_init_schemaDownSql,
	"000001_init_schema.up.sql":   _000001_init_schemaUpSql,
	"000002_init_schema.down.sql": _000002_init_schemaDownSql,
	"000002_init_schema.up.sql":   _000002_init_schemaUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_schema.down.sql": {_000001_init_schemaDownSql, map[string]*bintree{}},
	"000001_init_schema.up.sql":   {_000001_init_schemaUpSql, map[string]*bintree{}},
	"000002_init_schema.down.sql": {_000002_init_schemaDownSql, map[string]*bintree{}},
	"000002_init_schema.up.sql":   {_000002_init_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
